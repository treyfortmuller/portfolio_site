<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-12-30T03:53:47-08:00</updated><id>/</id><title type="html">Trey Fortmuller</title><subtitle>Jekyll version of the Massively theme by HTML5UP</subtitle><entry><title type="html">Waterproof Quadcopter Build</title><link href="/blog/waterproof/" rel="alternate" type="text/html" title="Waterproof Quadcopter Build" /><published>2017-12-15T00:00:00-08:00</published><updated>2017-12-15T00:00:00-08:00</updated><id>/blog/waterproof</id><content type="html" xml:base="/blog/waterproof/">&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;After taking “Intro to Control for UAVs” (ME136) in the Fall of 2017, the professor Mark Mueller recruited my lab team to design and build a quadcopter to be used in his lab for research purposes. One of his graduate students is working on launching a drone from the ocean. This platform will be a test rig to be used within the lab as the grad student works on modeling the dynamics of an aquatic launch and developing control systems to achieve this reliably.&lt;/p&gt;

&lt;p&gt;The build had to employ the same flight controller that the lab already used for their various other drone related projects, the &lt;a href=&quot;https://www.bitcraze.io/crazyflie-2/&quot;&gt;Crazyflie&lt;/a&gt; from Bitcraze, a PCB designed to drive brushed motors.&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;
&lt;div class=&quot;row&quot;&gt;
	&lt;ul&gt;
		&lt;li&gt;Run the Crazyflie flight control board (an STM F4 microcontroller)&lt;/li&gt;
		&lt;li&gt;Have enough room for a radio based &lt;a href=&quot;https://www.bitcraze.io/loco-pos-system/&quot;&gt;localization unit&lt;/a&gt; to use for state estimation&lt;/li&gt;
		&lt;li&gt;Not too high of a voltage (limit to a 2S LiPo's 8.4V)&lt;/li&gt;
		&lt;li&gt;Compact, less than 200mm motor shaft to motor shaft&lt;/li&gt;
		&lt;li&gt;Agile, at least a 2:1 thust to weight ratio&lt;/li&gt;
		&lt;li&gt;Operate down to 3m of depth&lt;/li&gt;
		&lt;li&gt;Full battery voltage telemetry&lt;/li&gt;
	&lt;/ul&gt;
&lt;/div&gt;

&lt;h2 id=&quot;component-specification&quot;&gt;Component Specification&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;/images/waterproof/waterproof6.png&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Systems engineering for a multirotor is a large optimization problem including factors such as motor stator size, motor KV, prop diameter and airfoil, battery voltage and capacity, and aircraft size, weight, and configuration. Thankfully the requirements for the platform narrowed down our choices.&lt;/p&gt;

&lt;p&gt;We estimated we could meet all the requirements with a craft weighing around 100g. Based on existing motor thrust testing, we found that an 1104 7500KV motor could achieve 100g thrust on 2S running a 2inch prop, so we’d get a power to weight ratio of roughly 4:1.&lt;/p&gt;

&lt;p&gt;With this, we decided on a 2S LiPo at 400mAh. Knowing that all our components would have to be submersible, we decided to look around 10A rated 4-in-1 ESCs (4 ESCs for brushless motors on one PCB for easy mounting inside a waterproof enclosure).&lt;/p&gt;

&lt;p&gt;With our powertrain specified, we found the proper components on Amazon and began recreating them in CAD so I could design our frame and waterproof enclosure around them. The Bill of Materials for off the shelf components we included in the build is as follows:&lt;/p&gt;

&lt;h3&gt;Bill of Materials&lt;/h3&gt;
&lt;div class=&quot;table-wrapper&quot;&gt;
	&lt;table&gt;
		&lt;thead&gt;
			&lt;tr&gt;
				&lt;th&gt;Item&lt;/th&gt;
				&lt;th&gt;Description&lt;/th&gt;
				&lt;th&gt;Total Weight Contribution (grams)&lt;/th&gt;
			&lt;/tr&gt;
		&lt;/thead&gt;
		&lt;tbody&gt;
			&lt;tr&gt;
				&lt;td&gt;&lt;a href=&quot;https://store.bitcraze.io/collections/kits/products/crazyflie-2-0&quot;&gt;Crazyflie Flight Controller&lt;/a&gt;&lt;/td&gt;
				&lt;td&gt;STM F4 based microcontroller with an IMU and several UARTs&lt;/td&gt;
				&lt;td&gt;7&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr&gt;
				&lt;td&gt;&lt;a href=&quot;https://store.bitcraze.io/collections/positioning/products/loco-positioning-deck&quot;&gt;Bitcraze Loco Positioning Deck&lt;/a&gt;&lt;/td&gt;
				&lt;td&gt;RF based locolization module&lt;/td&gt;
				&lt;td&gt;3.3&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr&gt;
				&lt;td&gt;&lt;a href=&quot;https://www.amazon.com/iPower-Motor-Brushless-Quadcopter-Torrent/dp/B01N7QDZY6/ref=sr_1_3?ie=UTF8&amp;amp;qid=1510622724&amp;amp;sr=8-3&amp;amp;keywords=1104+7500kv&quot;&gt;iPower iX1104 7500KV Brushless Motor&lt;/a&gt;&lt;/td&gt;
				&lt;td&gt;Brushless motors&lt;/td&gt;
				&lt;td&gt;22&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr&gt;
				&lt;td&gt;&lt;a href=&quot;https://www.amazon.com/BLHeli_S-Electronic-Controller-Multirotor-Crazepony/dp/B076BDHCHX/ref=sr_1_4?rps=1&amp;amp;ie=UTF8&amp;amp;qid=1510621639&amp;amp;sr=8-4&amp;amp;keywords=20x20+10A+ESC&amp;amp;refinements=p_85%3A2470955011&quot;&gt;Wave 4-in-1 10A ESC&lt;/a&gt;&lt;/td&gt;
				&lt;td&gt;Single PCB with 4 ESCs for brushless motors rated for 10A continuous&lt;/td&gt;
				&lt;td&gt;6&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr&gt;
				&lt;td&gt;&lt;a href=&quot;https://www.amazon.com/Crazepony-400mAh-Battery-Racing-Quadcopter/dp/B072BH1XP6/ref=sr_1_1?ie=UTF8&amp;amp;qid=1510622347&amp;amp;sr=8-1&amp;amp;keywords=2S+400+mah&amp;amp;dpID=410fHvjWLiL&amp;amp;preST=_SY300_QL70_&amp;amp;dpSrc=srch&quot;&gt;Crazepony 400mAh 2S 7.4V 30C LiPo&lt;/a&gt;&lt;/td&gt;
				&lt;td&gt;A small 2-cell LiPo&lt;/td&gt;
				&lt;td&gt;22&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr&gt;
				&lt;td&gt;&lt;a href=&quot;https://www.amazon.com/Propellers-Compatible-6200-10000KV-Brushless-Transparent/dp/B074NP3LFF/ref=sr_1_1?s=toys-and-games&amp;amp;rps=1&amp;amp;ie=UTF8&amp;amp;qid=1510622468&amp;amp;sr=1-1&amp;amp;keywords=2inch+props&amp;amp;refinements=p_85%3A2470955011&quot;&gt;Gemfan 2040 Triblade Props&lt;/a&gt;&lt;/td&gt;
				&lt;td&gt;Some 2 inch diameter triblade propellors&lt;/td&gt;
				&lt;td&gt;3.6&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr&gt;
				&lt;td&gt;&lt;a href=&quot;https://www.amazon.com/Matek-Systems-Adjustable-Switchboard-Continuous/dp/B01EACBW6E/ref=sr_1_fkmr1_4?ie=UTF8&amp;amp;qid=1511574313&amp;amp;sr=8-4-fkmr1&amp;amp;keywords=matek+5V+regulator&quot;&gt;Matek Systems Micro BEC 5V/12V Adjustable Buck Module&lt;/a&gt;&lt;/td&gt;
				&lt;td&gt;Battery eliminator, a 5V bucking regulator&lt;/td&gt;
				&lt;td&gt;1&lt;/td&gt;
			&lt;/tr&gt;
		&lt;/tbody&gt;
	&lt;/table&gt;
&lt;/div&gt;

&lt;h2 id=&quot;design&quot;&gt;Design&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;/images/waterproof/waterproof4.png&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The main design constraint was the requirement that the vehicle must be submersible. Brushless motors are “waterproof” out of the box due to the insulating enamel applied to the wires of the motor winding in the stator, so those can operate underwater without issue. Everything else (flight controller, ESCs, localization module, voltage regulator, battery) would have to somehow be waterproofed or inside a watertight container.&lt;/p&gt;

&lt;p&gt;David, Joey, and I ideated on how we might protect the sensitive PCBs from the elements with a container of sorts. For the sake of preserving an ideal center of mass, close to the geometric center of the vehicle, we decided on two cases which sandwhich the frame of the quadcopter. The top case contains all the sensitive PCBs and the battery is protected by the bottom case. A hole is cut in the frame for the battery lead to reach the ESCs and regulator in the top case. 20+ hours of CADing in Fusion 360 later, I completed the full vehicle assembly including a custom frame, top and bottom cases, as well as gaskets to seal the cases against the frame. I included every single PCB as each would be mounted in the case and designed the cases around the components. This ensured a reasonable fit as well as the accuracy of the inertia tensor of the vehicle, an input to the PX4 firmware the lab had running onbaord the Crazyflies for flight control.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image main&quot;&gt;&lt;img src=&quot;/images/waterproof/waterproof_main2.png&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The electronics are mounted inside the top case using TPE mounting solutions, CA glue, heavy duty double sided foam tape, and M2 fasteners. There are 4 holes in the top case which allow the motor wires to reach the ESC board inside the case. Those holes would be filled with a rubbery silicon caulking with the wires threaded through.&lt;/p&gt;

&lt;h2 id=&quot;fabrication&quot;&gt;Fabrication&lt;/h2&gt;

&lt;h3 id=&quot;watertight-cases&quot;&gt;Watertight Cases&lt;/h3&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;/images/waterproof/waterproof1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;3D printing was the natural choice for frabrication of the custom cases, but normal FDM prints are not watertight. Small gaps between layers can allow some water to permeate even a thick shell of typical 3D printing plastics. SLA type prints (laser/projection based resin curing processes) are bound at a molecular level, so those are watertight. Thankfully at Jacobs Hall on campus at UC Berkeley, we had access to a Carbon3D printer for us to fabricate the cases. I had never printed anything with an SLA printer before, it was definitely a learning curve. This printing process has its own intricacies, there are different issues to debug than I was used to. It took 3 or 4 iterations before I figured out how to avoid vacuum pockets forming in the print, and how to arrange the support structure to avoid warping. Once I was happy with the part and its fabrication, I printed a top and bottom case in black “rigid polyurethane” on the Carbon 3D. All the Carbon3D resin chemistries are proprietary so beyond “polyurethane,” I really have no idea what the parts are made of, they were super durable though and I was happy.&lt;/p&gt;

&lt;h3 id=&quot;tpe-gaskets&quot;&gt;TPE Gaskets&lt;/h3&gt;
&lt;p&gt;The weakness of our double case sandwich approach is the potential leak at the interface between the cases and the frame. We had seen rubber gaskets used in other systems at an interface which needed to be watertight. A flexible 3D printing filament called thermal polyurethane (TPE) came to mind. I designed some gaskets which fit along the footprint of the top and bottom case along the frame. They are meant to be compressed when the top and bottom plate sandwich the frame using a few M2 nuts and bolts. I printed the gaskets in orange &lt;a href=&quot;https://www.amazon.com/NinjaFlex-TPU-3D-Printing-Filament/dp/B01LXZYJ3R/ref=sr_1_1?ie=UTF8&amp;amp;qid=1514450027&amp;amp;sr=8-1&amp;amp;keywords=ninjaflex&quot;&gt;NinjaFlex&lt;/a&gt; TPE on my personal Printrbot Simple and over-extruded the prints pretty severely to ensure better-than-average layer adhesion. The gaskets would be adhered to the cases with CA glue with the exposed interface between the case and gasket covered in watertight &lt;a href=&quot;https://www.amazon.com/MG-Chemicals-Silicone-Modified-Conformal/dp/B008O9YIV6/ref=sr_1_1?s=industrial&amp;amp;ie=UTF8&amp;amp;qid=1514450052&amp;amp;sr=1-1&amp;amp;keywords=silicon+conformal+coating&quot;&gt;silicon conformal coating.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;frame&quot;&gt;Frame&lt;/h3&gt;
&lt;p&gt;Ideally, the custom frame would be cut from a 3mm thick plate of carbon fiber. It would be rigid, light weight, and durable. We had the carbon purchased, but unfortunately we were finishing this project towards the end of the semester. During the last week of class, the waterjet we needed to access in order to safety CNC cut the carbon was all booked up due to other class projects being due for many other students. Cutting the carbon on a typical CNC mill would be a hard sell to the machineshop technicians as carbon fiber dust is one of the last things you’d like in your lungs. 3D printing to the rescue again… we recruited our good friend Eric to complete a speciality print for us. Eric owns a printer with a number of upgrades allowing him to print abrasive and high temperature filaments. He printed us a frame out of 3mm of carbon-reinforced nylon, and extremely durable material. It’s not as clean as the carbon fiber plate we planned on, but it’s rigid enough to be flight worthy.&lt;/p&gt;

&lt;h2 id=&quot;assembly-and-delivery&quot;&gt;Assembly and Delivery&lt;/h2&gt;

&lt;p&gt;After removing excess pins, direct soldering all the components together, and installing a voltage divider for stepping down the input to the VBAT sensor, we covered all the electronics in 2 coats of silicon conformal coating for safety in the off chance that any moisture got inside the case.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image main&quot;&gt;&lt;img src=&quot;/images/waterproof/waterproof3.png&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Modification to the PX4 firmware running on the Crazyflie is necessary in order for the PWM signal output to the ESC to be read correctly, and thus appropriately control the motors. PWM signal timing was adjusted to the standard 1000-2000 microsecond period, but the logic level of the signal worked out of the box. We also changed a hardcoded scaling factor to read the correct battery voltage from our new VBAT sensing resisor values.&lt;/p&gt;

&lt;p&gt;This project was certainly a design challenge and introduced me to an entirely different addative manufacturing process in SLA 3D printing. The more materials, processes, and printers I interact with, the more I see 3D printing as a promising engineering medium for research, prototyping, and manufacturing in the future.&lt;/p&gt;</content><summary type="html">A waterproof quadcopter built around the crazyflie flight controller for a professor researching aquatic drone launches.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/waterproof/waterproof_main.jpg" /></entry><entry><title type="html">Crazyflie Quadcopter Flight Controls</title><link href="/blog/cf-flight-controls/" rel="alternate" type="text/html" title="Crazyflie Quadcopter Flight Controls" /><published>2017-12-06T00:00:00-08:00</published><updated>2017-12-06T00:00:00-08:00</updated><id>/blog/cf-flight-controls</id><content type="html" xml:base="/blog/cf-flight-controls/">&lt;h2 id=&quot;me136-introduction-to-control-of-unmanned-aerial-vehicles&quot;&gt;ME136: Introduction to Control of Unmanned Aerial Vehicles&lt;/h2&gt;

&lt;p&gt;I took this course in the Fall of 2017, my junior year. When I took it, it was a brand new class, the first time it had been offered at Berkeley, as well as the first ever class taught by a new faculty member Mark Mueller. I recognized Professor Mueller from ETH Zurich’s Institute for Dynamic Systems and Control, the birthplace of the PX4 project and cool videos like &lt;a href=&quot;https://www.youtube.com/watch?v=3CR5y8qZf0Y&quot;&gt;this&lt;/a&gt;. I hadn’t taken any of the prerequisites for the class but decided to go for it anyway. A whole bunch of UAVs@Berkeley personnel would be accompanying me and figured I could make up for a lack of preprequisite classes with obsessive love for working on drones.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;/images/cf-flight-controls/cf2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The class started with a seven week long deep dive into the dynamics of multirotors in the fully abstract tensor formalism. We started with aerodynamical models for propellors and ended with a mixer matrix, the basis for our attitude controller. While the lecture of the course focused on theory and analysis in dynamics, estimation, and control, the lab section focused on implementing a hover controller from scratch. The class was split into groups of 3 or 4 and each group was given a &lt;a href=&quot;https://www.bitcraze.io/crazyflie-2/&quot;&gt;Crazyflie&lt;/a&gt; quadcopter to implement their controller on.&lt;/p&gt;

&lt;p&gt;The Crazyflie is a tiny brushed quadcopter powered by a 1S LiPo. It has an STM32F4 microcontroller running &lt;a href=&quot;http://www.nuttx.org/&quot;&gt;NuttX&lt;/a&gt;. The PCB that the microcontroller sits on doubles as a rigid frame for the quadcopter. The hardware (mostly the motors) leave something to be desired, but the firmware interface was really easy to work with. The class was given an Ubuntu virtual machine’s disk image to run in VirtualBox which had all the required dependencies installed. In the virtual machine, we compiled and flashed our custom firmware (all written in C++) to the board using the Ecplise IDE.&lt;/p&gt;

&lt;p&gt;The final lab of the semester was a flight competition. Each group was pitted against eachother to see who built the best performing controller. Long story short, we won, but more on that later. My lab group’s controller is available on &lt;a href=&quot;https://github.com/treyfortmuller/ME136&quot;&gt;my GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;course-description&quot;&gt;Course Description&lt;/h3&gt;
&lt;div class=&quot;box&quot;&gt;
  &lt;p&gt;
  	This course introduces students to the control of unmanned aerial vehicles (UAVs). The course will cover modeling and dynamics of aerial vehicles, and common control strategies. Laboratory exercises allow students to apply knowledge on a real system, by programming a microcontroller to control a UAV.
  &lt;/p&gt;
  &lt;p style=&quot;text-align:right&quot;&gt;
  	- me.berkeley.edu
  &lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;full-system-block-diagram&quot;&gt;Full System Block Diagram&lt;/h2&gt;

&lt;p&gt;Here is the entire quadcopter controller represented in a block diagram as provided by our professor. Red ellipses represent hardware, shaded triangles represent simple summations and mulitplications, and rectangles represent system parametrizations and dynamics, or estimation and control algorithms we built up in lab sections.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image main&quot;&gt;&lt;img src=&quot;/images/cf-flight-controls/block_diagram.png&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;parametrizing-the-system&quot;&gt;Parametrizing the System&lt;/h2&gt;

&lt;p&gt;We started the lab section of the class by finding some scaling factors for the physical system empiracally. Ultimately we needed the transformation from the PWM command we could dictate as an output of our control, to the thrust produced the motor. The thrust produced at each motor creates a moment about the vehicle’s center of mass and contributes to the total normalized thurst. We find this transformation in two steps:&lt;/p&gt;

&lt;h4 id=&quot;motor-pwm-to-propellor-angular-velocity&quot;&gt;Motor PWM to Propellor Angular Velocity&lt;/h4&gt;

&lt;p&gt;We needed to know how PWM commands from the flight controller to the motors affect the angular velocity of the propellors. We took a photo laser &lt;a href=&quot;https://www.amazon.com/Digital-Photo-Laser-Tachometer-Contact/dp/B001N4QY66/ref=sr_1_1_sspa?ie=UTF8&amp;amp;qid=1514604195&amp;amp;sr=8-1-spons&amp;amp;keywords=tachometer&amp;amp;psc=1&quot;&gt;tachometer&lt;/a&gt; and measured the propellor RPMs at various PWM commands and derived a linear relationsip.&lt;/p&gt;

&lt;h4 id=&quot;propellor-angular-velocity-to-thrust&quot;&gt;Propellor Angular Velocity to Thrust&lt;/h4&gt;

&lt;p&gt;The class didn’t have any thrust stands available, so the GSIs got creative and gave each team a lever made from laser cut acrylic that the Crazyflie could be fastened to with M2 screws. The lever was fixed to the edge of a table with tape. We commanded various propellor angular velocities (using our new PWM to angular velocity relationship) and logged the accelerometer data to find the average angle that the quadcopter arrived at. Then we solved the statics problem embodied by the free body diagram to determine the thrust force that each propellor was producing. We derived a quadratic relationship here.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image main&quot;&gt;&lt;img src=&quot;/images/cf-flight-controls/cf_lever.png&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;state-estimation&quot;&gt;State Estimation&lt;/h2&gt;

&lt;h4 id=&quot;attitude-estimator&quot;&gt;Attitude Estimator&lt;/h4&gt;

&lt;p&gt;The attitude estimator obtains the orientation of the quadcopter (pitch, roll, yaw) in the body frame of the vehicle. It uses the sensor data from the IMU (a rate gyroscope and an accelerometer). We parametrized the rotations (a frighteningly rich topic that I was not aware of before taking this class) of the vehicle using Euler angles. I recognize that this choice makes us look like we’ve learned nothing from &lt;a href=&quot;https://en.wikipedia.org/wiki/Gimbal_lock#On_Apollo_11&quot;&gt;Apollo 11&lt;/a&gt;. We implemented rotations using Euler angles because they are intuitive and easy to visualize, but they do suffer from singularities (gimbal lock, wrist flip, etc. depending on who you talk to), and some computational slowness. This was acceptable since we were looking to contol about a hover, if our quadcopter passed through 90 degrees in pitch, something bad happened. Quaternions of rotation (not the hypercomplex ‘Quaternions’), are the best choice for rotation parametrization because they do not suffer from singularities are not computationally intensive. Quaternion parametrization was introduced at the end of the class, and redo-ing our entire attitude estimator using quaternions in the week before the class competition seemed unwise.&lt;/p&gt;

&lt;p&gt;Here’s the estimator as it was originally designed in lab, notice we use a trade-off factor &lt;code&gt;p = 0.01&lt;/code&gt; so we heavily favor the gyroscope, but supplement it with the accelerometer data to prevent drift.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//***Gyro + accelerometer attitude estimator***
estRoll = (1.0f-p)*(estRoll + dt*rateGyro_corr.x) + p*(in.imuMeasurement.accelerometer.y / gravity);
estPitch = (1.0f-p)*(estPitch + dt*rateGyro_corr.y) + p*(in.imuMeasurement.accelerometer.x / -gravity);
estYaw = estYaw + dt*rateGyro_corr.z;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In preparation for the final competition we decided to eliminate the small angle approximations, sacrificing ease of computation for a more accurate estimator. It improved performance and stability in some scenarios.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// ***Gyro + accelerometer attitude estimator + no small angle aprroximations***
AngVel.x = rateGyro_corr.x + rateGyro_corr.y*(sinf(estRoll)*tanf(estPitch)) + rateGyro_corr.z*(cosf(estRoll)*tanf(estPitch));
AngVel.y = rateGyro_corr.y*cosf(estRoll) - rateGyro_corr.z*sinf(estRoll);
AngVel.z = rateGyro_corr.y*((sinf(estRoll))/(cosf(estPitch))) + rateGyro_corr.z*((cosf(estRoll))/(cosf(estPitch)));

// beware accelerometer and gyro measurements on different axis can reflect the same motion
estRoll = (1.0f-p)*(estRoll + dt*AngVel.x) + p*(asinf( in.imuMeasurement.accelerometer.y / (gravity*cosf(estPitch))));
estPitch = (1.0f-p)*(estPitch + dt*AngVel.y) + p*(asinf( in.imuMeasurement.accelerometer.x / -gravity));
estYaw = estYaw + dt*AngVel.z;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;height-estimator&quot;&gt;Height Estimator&lt;/h4&gt;

&lt;p&gt;The height estimator relies only on a range sensor below the quadcopter. This is a noisey sensor so we’ve implemented some checks to throw out bad data. It’s also a slow sensor so it doesn’t update at every call to our main loop. The one subtlety in working with this sensor is that a change in pitch or roll angle will cause the detected distance to the ground to change. We account for this in &lt;code&gt;hMeas&lt;/code&gt;, and mix this value with &lt;code&gt;estHieght&lt;/code&gt; which updates with an estimated velocity based on the height deltas between sucessive calls to the main loop.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// height estimator:
// prediction step:
estHeight = estHeight + estVelocity_3 * dt;

// correction step, directly after the prediction step:
float const mixHeight = 0.3f;
if (in.heightSensor.updated) {

	// check that the measurement is reasonable
	if (in.heightSensor.value &amp;lt; 2.0f) {
		float hMeas = in.heightSensor.value * cosf(estRoll) * cosf(estPitch);
		estHeight = (1 - mixHeight) * estHeight + mixHeight * hMeas;

		float v3Meas = (hMeas - lastHeightMeas_meas) / (in.currentTime - lastHeightMeas_time);

		estVelocity_3 = (1- mixHeight) * estVelocity_3 + mixHeight * v3Meas;
		// store this measurement for the next velocity update
		lastHeightMeas_meas = hMeas;
		lastHeightMeas_time = in.currentTime;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;horizontal-estimator&quot;&gt;Horizontal Estimator&lt;/h4&gt;

&lt;p&gt;The horizontal estimator is very similar to the height estimator in that we have to account for pitch and roll changes past some small angle. We augment the optical flow sensor outputs &lt;code&gt;sigma_1, sigma_2&lt;/code&gt; with rate gyro data in pitch and roll. Note here that optical flow only gives us information on horizontal velocity (hence “flow”) so we’ve got to integrate to get an estimated position.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;float const mixHorizVel = 0.5f;
if (in.opticalFlowSensor.updated) {
	float sigma_1 = -in.opticalFlowSensor.value_x;
	float sigma_2 = -in.opticalFlowSensor.value_y;

	float div = (cosf(estRoll) * cosf(estPitch));

	if (div &amp;gt; 0.5f) {
		float deltaPredict = estHeight / div;

		float v1Meas = (-sigma_1 + in.imuMeasurement.rateGyro.y) * deltaPredict;
		float v2Meas = (-sigma_2 - in.imuMeasurement.rateGyro.x) * deltaPredict;

		estVelocity_1 = (1.0f - mixHorizVel) * estVelocity_1 + mixHorizVel * v1Meas;
		estVelocity_2 = (1.0f - mixHorizVel) * estVelocity_2 + mixHorizVel * v2Meas;
	}
}

estPos_1 = estPos_1 + (dt * estVelocity_1);
estPos_2 = estPos_2 + (dt * estVelocity_2);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;controller&quot;&gt;Controller&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;/images/cf-flight-controls/cf1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I struggled with how to talk about the controller on my website in just a few paragraphs. I feel like I’d have to write a few thousand words to offer any more insight than the source code alone can provide. If staring at the source code interests you, then by all means &lt;a href=&quot;https://github.com/treyfortmuller/ME136/blob/master/UserCode.cpp&quot;&gt;check it out&lt;/a&gt;. Basically, the controller takes our state estimation to be truth and controls around a flat, zero-velocity state for the quadcopter, i.e. hovering at about half a meter off the ground. The approach is cascaded (so rate control is more aggresive than angle controls for example) and time constants are chosen so that nested controllers at each stage can be considered instantaneous.&lt;/p&gt;

&lt;h2 id=&quot;flight-competition&quot;&gt;Flight Competition&lt;/h2&gt;

&lt;p&gt;The last lab section of the course was a hovering contest among the 20 or so lab groups. A net was set up in the middle of the room, enclosing a 6ft by 8ft rectangular prism, about 8ft high. You could place your quadcopter on the ground anywhere inside the netting but then you had to pass your XBox controller off to a GSI who would press the red button to start your main loop and begin your autonomous hover (hopefully). Each team was given 8 minutes to run as many flights as possible, the longest flight wins! Our actual lab grade depended on how we ranked against the other teams so the stakes were high. There was one catch: after 90 seconds of flight, one of the GSIs would turn on a fan inside the netting in an attempt to destabilize the controller or blow the quad into a net.&lt;/p&gt;

&lt;p&gt;My team (David, Joey, and I) was the only team to reach 90 seconds of flight and have the fan turn on. On our longest run we achieved 105 seconds of flight before crashing into the net, withstanding the fan for 15 seconds. We were excited, I wish I had footage of the event but we had pulled an all-nighter before the competition tuning and perfecting the controller and it slipped my barely functional mind at the time. There were a number of modifications we made to the stock controller which allowed us to achieve this performance. We eliminated small angle approximations from our estimators and controllers, we implemented position control as well as an &lt;a href=&quot;https://en.wikipedia.org/wiki/Absement&quot;&gt;absition&lt;/a&gt; feedforward (the integral of position is called “absition” or “absement,” it’s a thing). We added height setpoint scheduling for a smooth takeoff as well as hardcoded gain scheduling on the attitude controller. These changes, along with fine tuning our time constants through many hours of flight tests, allowed us to stay in the air for longer than we expected. &lt;a href=&quot;https://kittyhawk.aero/&quot;&gt;Kitty Hawk&lt;/a&gt; ended up sponsoring the competition with a DJI Spark drone for each member of the winning team. Here we are on zero hours of sleep, but very gratified. Left to right Professor Mueller, David, Joey, and yours truly.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image main&quot;&gt;&lt;img src=&quot;/images/cf-flight-controls/cf3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ME136 was a challenge but definitely cemented my interest in controls. Of all the all-nighters I’ve pulled, the one before this class competition was one of the most worth it.&lt;/p&gt;</content><summary type="html">A cascased controller implementation for autonomous loitering with a Crazyflie quadcopter.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/cf-flight-controls/cf_main.jpg" /></entry><entry><title type="html">Photogrammetry 3D Scanner</title><link href="/blog/3d-scanner/" rel="alternate" type="text/html" title="Photogrammetry 3D Scanner" /><published>2017-10-08T00:00:00-07:00</published><updated>2017-10-08T00:00:00-07:00</updated><id>/blog/3d-scanner</id><content type="html" xml:base="/blog/3d-scanner/">&lt;p&gt;I built this project with my friends Suneel and Nathan for UC Berkeley’s hackathon: &lt;a href=&quot;https://calhacks.io/&quot;&gt;Cal Hacks&lt;/a&gt;, one of the largest hackathons in the world. The event featured 1,700 hackers from 100 schools and 5 countries building projects for 36 striaght hours. It was an increidble experience, and a very professionally run event. After we submitted and presented our work, in a Redbull driven haze, we found out that we were one of six teams to win the Cal Hacks fellowship award.&lt;/p&gt;

&lt;h3 id=&quot;the-cal-hacks-fellowship&quot;&gt;The Cal Hacks Fellowship&lt;/h3&gt;
&lt;div class=&quot;box&quot;&gt;
  &lt;p&gt;
  	Why do you have to stop when the hackathon is over? We’re introducing the Cal Hacks Fellowship, a program that accepts 5 hackathon teams to continue their projects beyond the hackathon. We plan to continue improving your project and move it past its initial stage so you can continue adding onto it, while receiving the same support from a hackathon.&lt;/p&gt;
  &lt;p&gt;
	This includes: One-on-one director mentorship, Work with industry professionals and venture capitalists, Receive support from The House Founders program, Gain access to future hack nights and unlimited amount of free resources.
  &lt;/p&gt;
  &lt;p style=&quot;text-align:right&quot;&gt;
  	- calhacks.io
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;We were given $1000 to continue building our project out as far as we’d like. Suneel, Nathan, and I have plenty of ideas as to how to best use this money to turn our weekend project into a useful tool. Our original Cal Hacks submission for the project can be found on &lt;a href=&quot;https://devpost.com/software/greg-wt609e&quot;&gt;DevPost&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;inpsiration&quot;&gt;Inpsiration&lt;/h2&gt;

&lt;p&gt;3D Printing offers quick and easy access to a physical design from a digitized mesh file. Transferring a physical model back into a digitized mesh is much less accessible in a desktop platform. We sought to create our own desktop 3D scanner that could generate high fidelity, colored and textured meshes for 3D printing or including models in computer graphics. The build is named after our good friend Greg who let us borrow his stereocamera for the weekend, enabling this project.&lt;/p&gt;

&lt;h2 id=&quot;the-build&quot;&gt;The Build&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;/images/3d-scanner/greg10.JPG&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The rig uses a ZED stereocamera driven by a ROS wrapper to take stereo images at various known poses in a spiral which is executed with precision by two stepper motors driving a leadscrew elevator and a turn table for the model to be scanned. We designed the entire build in a high detail CAD using Autodesk Fusion 360, 3D printed L-brackets and mounting hardware to secure the stepper motors to the T-slot aluminum frame we cut at the metal shop at Jacobs Hall. There are also 1/8th wood pieces that were laser cut at Jacobs, including the turn table itself. We designed the power system around an Arduino microcontroller and and an Adafruit motor shield to drive the steppers. The Arduino and the ZED camera are controlled by python over a serial port and a ROS wrapper respectively to automate the process of capturing the images used as an input to OpenMVG/MVS to compute dense point clouds and eventually refined meshes.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image main&quot;&gt;&lt;img src=&quot;/images/3d-scanner/greg_cad.png&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;challenges&quot;&gt;Challenges&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;/images/3d-scanner/greg11.JPG&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;We ran into a few minor mechanical design issues that were unforeseen in the CAD, luckily we had access to a 3D printer throughout the entire weekend and were able to iterate quickly on the tolerancing of some problematic parts. Issues with the AccelStepper library for Arduino used to simultaneously control the velocity and acceleration of 2 stepper motors slowed us down early Sunday evening and we had to extensively read the online documentation to accomplish the control tasks we needed to. Lastly, the complex 3D geometry of our rig (specifically rotation and transformation matrices of the cameras in our defined world coordinate frame) slowed us down and we believe is still problematic as the hackathon comes to a close.&lt;/p&gt;

&lt;h2 id=&quot;future-improvements&quot;&gt;Future Improvements&lt;/h2&gt;

&lt;p&gt;We’re proud of the mechanical design and fabrication, actuator precision, and data collection automation we achieved in just 36 hours. The outputted point clouds and meshes are still be improved. This is a result of the ZED stereocamera we used, it wasn’t the right camera for the job as it is optimized for depth sensing up to 20m away, not 20cm away as in our build. It did however have an awesome advantages in that we could control it through ROS, so automating the activation of the camera through a python script was easy.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image main&quot;&gt;&lt;img src=&quot;/images/3d-scanner/greg_build.png&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;With the money we won at the hackathon, we are planning on purchasing an Nvidia TX2, to integrate all the automation and mesh contrusction onto an embedded platform that can be carried with the scanner. Also, we’ll purchase an XBox Kinect camera and try to rebuild around using IR depth sensing rather than photogrammetry. This method has been proven specifically for this close range application and we’re hoping to generate our first usable mesh during the Spring 2018.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image main&quot;&gt;&lt;img src=&quot;/images/3d-scanner/greg4.png&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;built-with&quot;&gt;Built With&lt;/h2&gt;
&lt;div class=&quot;row&quot;&gt;
	&lt;div class=&quot;6u 12u$(small)&quot;&gt;
		&lt;ul&gt;
			&lt;li&gt;OpenMVG&lt;/li&gt;
			&lt;li&gt;Arduino&lt;/li&gt;
			&lt;li&gt;Python&lt;/li&gt;
			&lt;li&gt;ZED from Stereolabs&lt;/li&gt;
			&lt;li&gt;ROS&lt;/li&gt;
			&lt;li&gt;CUDA&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/div&gt;
&lt;/div&gt;</content><summary type="html">A vision based 3D scanner utilizing photogrammetry to generate meshes, affectionately called 'Greg.'</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/3d-scanner/greg9.JPG" /></entry><entry><title type="html">Custom Electric Longboard</title><link href="/blog/e-board/" rel="alternate" type="text/html" title="Custom Electric Longboard" /><published>2017-07-15T00:00:00-07:00</published><updated>2017-07-15T00:00:00-07:00</updated><id>/blog/e-board</id><content type="html" xml:base="/blog/e-board/">&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;h2 id=&quot;drivetrain-specification&quot;&gt;Drivetrain Specification&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;image main&quot;&gt;&lt;img src=&quot;/images/e-board/motor_math.png&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;design&quot;&gt;Design&lt;/h2&gt;

&lt;h3 id=&quot;the-board&quot;&gt;The Board&lt;/h3&gt;

&lt;h3 id=&quot;the-handheld-remote&quot;&gt;The Handheld Remote&lt;/h3&gt;</content><summary type="html">IN PROGRESS: An electric longboard with a handheld wireless controller.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/e-board/board_main.jpg" /></entry><entry><title type="html">Midair Hotswap</title><link href="/blog/hotswap/" rel="alternate" type="text/html" title="Midair Hotswap" /><published>2017-06-15T00:00:00-07:00</published><updated>2017-06-15T00:00:00-07:00</updated><id>/blog/hotswap</id><content type="html" xml:base="/blog/hotswap/">&lt;h2 id=&quot;how-to-use-this-theme&quot;&gt;How to Use This Theme&lt;/h2&gt;
&lt;p&gt;Just go ahead and read up on &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;how to install Jekyll&lt;/a&gt;. It’s not too hard I promise!&lt;/p&gt;

&lt;p&gt;Download this repository &lt;a href=&quot;https://github.com/iwiedenm/jekyll-theme-massively&quot;&gt;here&lt;/a&gt; and save it to any folder you want.&lt;/p&gt;

&lt;p&gt;Open a terminal window or a command line and &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; to that location.&lt;/p&gt;

&lt;p&gt;Then enter: &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;. You can now access your new Jekyll site from &lt;a href=&quot;http://127.0.0.1:4000/&quot;&gt;http://127.0.0.1:4000/&lt;/a&gt;. Have fun exploring your new site!&lt;/p&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;
&lt;h3 id=&quot;auto-generating-sitemap&quot;&gt;Auto-Generating Sitemap&lt;/h3&gt;
&lt;p&gt;The sitemap is auto generated! Just simply change the front matter of each site. It looks like so…&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sitemap:
    priority: 0.7
    lastmod: 2017-11-02
    changefreq: weekly
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;formspring-integration&quot;&gt;Formspring integration&lt;/h3&gt;
&lt;p&gt;The contact form below each page on the footer actually collects information! Just change your email address in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file!&lt;/p&gt;</content><summary type="html">A mechatronics platform designed to autonomously swap a quadcopter's battery, without touching the ground.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/pic02.jpg" /></entry><entry><title type="html">Custom RC Transmitter</title><link href="/blog/drone-tx/" rel="alternate" type="text/html" title="Custom RC Transmitter" /><published>2016-12-15T00:00:00-08:00</published><updated>2016-12-15T00:00:00-08:00</updated><id>/blog/drone-tx</id><content type="html" xml:base="/blog/drone-tx/">&lt;h2 id=&quot;design-innovation-22&quot;&gt;Design Innovation 22&lt;/h2&gt;
&lt;p&gt;I took Design Innovation 22 in the Fall of my sophmore year. I thoroughly enjoyed it and gained a lot of exposure to modern CNC fabricatino methodologies. Design and analysis is much more rewarding when you get to actually build the thing you designed and analyzed. For my final project in the class, my lab partner Kireet and I built a custom quadcopter frame and and our own RC transmitter to control it. The STM F3-based flight controller onboard the quadcopter is running an opensource firmware called &lt;a href=&quot;https://github.com/betaflight/betaflight&quot;&gt;Betaflight&lt;/a&gt;. The reciever and transmitter are implemented with Arduino microcontrollers and 2.4Ghz RF modules.&lt;/p&gt;

&lt;h3 id=&quot;course-description&quot;&gt;Course Description&lt;/h3&gt;
&lt;div class=&quot;box&quot;&gt;
  	&lt;p&gt;
  		This course teaches concepts, skills and methods required to design, prototype, and fabricate physical objects. Each week relevant techniques in 2D and 3D modeling and fabrication are presented along with basic electronics and circuit design. Projects are assigned that cover the weekly course material. Topics include a range of prototyping and fabrication techniques including laser­cutting, 3D modeling and 3D printing, soldering, basic circuits, microcontrollers, sensors and actuators, and interface mockups.
  	&lt;/p&gt;
  	&lt;p style=&quot;text-align:right&quot;&gt;
  		- jacobsinstitute.berkeley.edu
  	&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;project-description&quot;&gt;Project Description&lt;/h2&gt;

&lt;p&gt;A quadcopter along with a remote control, using two gimbal joysticks, two transceiver modules, an Arduino Uno, and an Arduino Nano. The radio control was implemented in house, we receive 2-axis potentiometer values from the gimbals, transmit them, map them to PWM microsecond values, and generate a PPM signal to send to the flight controller. Both the remote control and the quad include laser cut plates separated by aluminum stand offs and 3D printed component mounting pieces. The quadcopter also features a small first person view camera that transmits a live analog video feed to a monitor allowing the quad to be piloted without line of sight. &lt;a href=&quot;https://github.com/treyfortmuller/Drone-Rx-Tx&quot;&gt;Here’s&lt;/a&gt; the GitHub repo for the project, and &lt;a href=&quot;https://devpost.com/software/drone-transmitter&quot;&gt;here&lt;/a&gt; is the original DevPost for the project.&lt;/p&gt;

&lt;div class=&quot;video-wrapper&quot;&gt;
	&lt;div class=&quot;video-responsive&quot;&gt;
		&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/jWmNdqT4Q9A?rel=0&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;development-lifecycle&quot;&gt;Development Lifecycle&lt;/h2&gt;

&lt;h4 id=&quot;week-1&quot;&gt;Week 1&lt;/h4&gt;

&lt;p&gt;A low fidelity 3D printed chassis with motors properly representing the size and weight of the first draft of our quadcopter including the component mounting for the flight stack.&lt;/p&gt;

&lt;h4 id=&quot;week-2&quot;&gt;Week 2&lt;/h4&gt;

&lt;p&gt;First working model of the quadcopter utilizing 2.5” props and two laser cut plates that surround the props to allow for safer indoor flight. This version utilized a proprietary transmitter and receiver (as well as RF protocol) for control.&lt;/p&gt;

&lt;h4 id=&quot;week-3&quot;&gt;Week 3&lt;/h4&gt;

&lt;p&gt;Many body options were explored this week, we settled on a wrap of kerfed laser cut wood that we brought to medium fidelity. The addition further protected the motors but required iteration in terms of sizing and fit.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image main&quot;&gt;&lt;img src=&quot;/images/drone-tx/drone1.png&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;week-4&quot;&gt;Week 4&lt;/h4&gt;

&lt;p&gt;The first 3D printable design for a custom transmitter was fabricated as well as a high fidelity version of the wrap using lighter chipboard that fit the frame properly and was painted red for a finished look. We ended up abandoning the wrap idea when we heavily modified the frame for the final version of our quadcopter for the sake of performance improvements.&lt;/p&gt;

&lt;h4 id=&quot;week-5&quot;&gt;Week 5&lt;/h4&gt;

&lt;p&gt;Nearly all the components were included in a CAD model for the final quadcopter and transmitter. The quad received a chassis redesign which is larger allowing for brushless motors with a larger stator to be mounted so that we can swing larger props and thus achieve more thrust, as our current set up was plagued with weight issues. The new frame design also considered wire routing, and component mounting with more fidelity. The landing gear which straps to the battery was designed and 3D printed on this iteration as well as the “hood” piece which serves as our body, it houses the Arduino Nano, an nRF24 transceiver module, and the FPV camera is perched on top. The transmitter was redesigned to be either more 3D printable or laser cut. We ended up laser cutting the final iteration without losing much of the ergonomics of the device. We also had to design around large gimbal joysticks which are mounted with stand offs on the flanges of the transmitter which gave great control resolution and linearity as compared to previous designs which utilized cheaper game controller type joysticks.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;image main&quot;&gt;&lt;img src=&quot;/images/drone-tx/tx1.JPG&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;bill-of-materials&quot;&gt;Bill of Materials&lt;/h2&gt;
&lt;div class=&quot;table-wrapper&quot;&gt;
	&lt;table&gt;
		&lt;thead&gt;
			&lt;tr&gt;
				&lt;th&gt;Item&lt;/th&gt;
				&lt;th&gt;Description&lt;/th&gt;
			&lt;/tr&gt;
		&lt;/thead&gt;
		&lt;tbody&gt;
			&lt;tr&gt;
				&lt;td&gt;LiPo battery&lt;/td&gt;
				&lt;td&gt;3S 800mAh pack for power with JST connector&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr&gt;
				&lt;td&gt;Brushless motors&lt;/td&gt;
				&lt;td&gt;3600KV DYS 1407 stator size motors&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr&gt;
				&lt;td&gt;Piko BLX Flight Controller&lt;/td&gt;
				&lt;td&gt;STM F3 microcontroller based flight controller&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr&gt;
				&lt;td&gt;ESCs&lt;/td&gt;
				&lt;td&gt;LittleBee Pro 20A opto speed controllers for brushless motors&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr&gt;
				&lt;td&gt;Arduino Uno&lt;/td&gt;
				&lt;td&gt;Micro controller utilized on the controller (runs transmit.ino)&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr&gt;
				&lt;td&gt;Arduino Nano&lt;/td&gt;
				&lt;td&gt;Micro controller utilized on the quad (runs receive.ino)&lt;/td&gt;
			&lt;/tr&gt;
			&lt;tr&gt;
				&lt;td&gt;nRf24L01 Transeivers&lt;/td&gt;
				&lt;td&gt;Transceiver modules utilized in our custom transmitter and receiver set&lt;/td&gt;
			&lt;/tr&gt;
		&lt;/tbody&gt;
	&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;image main&quot;&gt;&lt;img src=&quot;/images/drone-tx/tx2.png&quot; alt=&quot;&quot; /&gt;&lt;/span&gt;&lt;/p&gt;</content><summary type="html">Part of my final project for Design Innovation 22, an Arduino driven RC Transmitter.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/drone-tx/tx_main.jpg" /></entry><entry><title type="html">Robot Learning Lab</title><link href="/blog/rll/" rel="alternate" type="text/html" title="Robot Learning Lab" /><published>2016-09-01T00:00:00-07:00</published><updated>2016-09-01T00:00:00-07:00</updated><id>/blog/rll</id><content type="html" xml:base="/blog/rll/">&lt;h2 id=&quot;how-to-use-this-theme&quot;&gt;How to Use This Theme&lt;/h2&gt;
&lt;p&gt;Just go ahead and read up on &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;how to install Jekyll&lt;/a&gt;. It’s not too hard I promise!&lt;/p&gt;

&lt;p&gt;Download this repository &lt;a href=&quot;https://github.com/iwiedenm/jekyll-theme-massively&quot;&gt;here&lt;/a&gt; and save it to any folder you want.&lt;/p&gt;

&lt;p&gt;Open a terminal window or a command line and &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; to that location.&lt;/p&gt;

&lt;p&gt;Then enter: &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;. You can now access your new Jekyll site from &lt;a href=&quot;http://127.0.0.1:4000/&quot;&gt;http://127.0.0.1:4000/&lt;/a&gt;. Have fun exploring your new site!&lt;/p&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;
&lt;h3 id=&quot;auto-generating-sitemap&quot;&gt;Auto-Generating Sitemap&lt;/h3&gt;
&lt;p&gt;The sitemap is auto generated! Just simply change the front matter of each site. It looks like so…&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sitemap:
    priority: 0.7
    lastmod: 2017-11-02
    changefreq: weekly
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;formspring-integration&quot;&gt;Formspring integration&lt;/h3&gt;
&lt;p&gt;The contact form below each page on the footer actually collects information! Just change your email address in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file!&lt;/p&gt;</content><summary type="html">Part of my responsibilities as an undergraduate research assisstant in Pieter Abbeel's RLL at UC Berkeley.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/pic02.jpg" /></entry><entry><title type="html">FPV Racing Quadcopters</title><link href="/blog/fpv/" rel="alternate" type="text/html" title="FPV Racing Quadcopters" /><published>2015-08-01T00:00:00-07:00</published><updated>2015-08-01T00:00:00-07:00</updated><id>/blog/fpv</id><content type="html" xml:base="/blog/fpv/">&lt;h2 id=&quot;how-to-use-this-theme&quot;&gt;How to Use This Theme&lt;/h2&gt;
&lt;p&gt;Just go ahead and read up on &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;how to install Jekyll&lt;/a&gt;. It’s not too hard I promise!&lt;/p&gt;

&lt;p&gt;Download this repository &lt;a href=&quot;https://github.com/iwiedenm/jekyll-theme-massively&quot;&gt;here&lt;/a&gt; and save it to any folder you want.&lt;/p&gt;

&lt;p&gt;Open a terminal window or a command line and &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; to that location.&lt;/p&gt;

&lt;p&gt;Then enter: &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;. You can now access your new Jekyll site from &lt;a href=&quot;http://127.0.0.1:4000/&quot;&gt;http://127.0.0.1:4000/&lt;/a&gt;. Have fun exploring your new site!&lt;/p&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;

&lt;h3 id=&quot;formspree-integration&quot;&gt;Formspree integration&lt;/h3&gt;
&lt;p&gt;The contact form below each page on the footer actually collects information! Just change your email address in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file!&lt;/p&gt;</content><summary type="html">I build acrobatic FPV enabled quadcopters for racing and freestyle flight.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/pic02.jpg" /></entry></feed>
